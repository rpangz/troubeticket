{"remainingRequest":"D:\\aplikasi\\vue\\troubeticket\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\aplikasi\\vue\\troubeticket\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\aplikasi\\vue\\troubeticket\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\aplikasi\\vue\\troubeticket\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"D:\\aplikasi\\vue\\troubeticket\\src\\views\\Home.vue","mtime":1606704398947},{"path":"D:\\aplikasi\\vue\\troubeticket\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606653957433},{"path":"D:\\aplikasi\\vue\\troubeticket\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1606654029944},{"path":"D:\\aplikasi\\vue\\troubeticket\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606653957433},{"path":"D:\\aplikasi\\vue\\troubeticket\\node_modules\\vue-loader\\lib\\index.js","mtime":1606654029943}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}